{"ast":null,"code":"import jwt from 'jsonwebtoken';\nimport uuid4 from 'uuid4';\nimport { envMapping } from '../../constants';\n\nconst generateToken = ({\n  token_variables,\n  secret,\n  customer_id,\n  res\n}) => {\n  jwt.sign(token_variables, secret, {\n    algorithm: 'HS256',\n    expiresIn: '24h',\n    issuer: customer_id,\n    jwtid: uuid4()\n  }, function (error, token) {\n    if (error) {\n      res.status(400).json({\n        error\n      });\n    } else {\n      res.status(200).json({\n        token\n      });\n    }\n  });\n};\n\nexport default (async (req, res) => {\n  res.setHeader('Access-Control-Allow-Origin', '*');\n  res.setHeader('Access-Control-Allow-Methods', '*');\n  let payload;\n\n  try {\n    payload = JSON.parse(req.body);\n  } catch (error) {\n    res.status(400).json({\n      error\n    });\n    return;\n  }\n\n  var {\n    room_id,\n    user_name,\n    peer_id,\n    env,\n    role\n  } = payload;\n  let user_id;\n\n  if (user_name) {\n    user_id = uuid4() + user_name;\n  } else {\n    user_id = uuid4() + peer_id; //To be deprecated. This peer_id is incorrectly named\n  }\n\n  if (env in envMapping) {\n    const customer_id = process.env['CUSTOMER_ID'];\n    const secret = process.env['APP_SECRET'];\n    const access_key = process.env['APP_ACCESS_KEY'];\n    const app_id = process.env['APP_ID'];\n    const token_variables = {\n      access_key: access_key,\n      app_id: app_id,\n      room_id: room_id,\n      user_id: user_id,\n      role: role\n    };\n    generateToken({\n      token_variables,\n      secret,\n      customer_id,\n      res\n    });\n  } else {\n    res.status(400).json({\n      error: {\n        message: 'Wrong env specified'\n      }\n    });\n  }\n});","map":null,"metadata":{},"sourceType":"module"}