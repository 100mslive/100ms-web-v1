{"ast":null,"code":"import jwt from 'jsonwebtoken';\nimport uuid4 from 'uuid4';\nimport { envMapping } from '../../constants';\n\nconst generateToken = ({\n  token_variables,\n  secret,\n  customer_id,\n  res\n}) => {\n  jwt.sign(token_variables, secret, {\n    algorithm: 'HS256',\n    expiresIn: '24h',\n    issuer: customer_id,\n    jwtid: uuid4()\n  }, function (error, token) {\n    if (error) {\n      res.status(400).json({\n        error\n      });\n    } else {\n      res.status(200).json({\n        token\n      });\n    }\n  });\n};\n\nexport default (async (req, res) => {\n  res.setHeader('Access-Control-Allow-Origin', '*');\n  res.setHeader('Access-Control-Allow-Methods', '*');\n  let payload;\n\n  try {\n    payload = JSON.parse(req.body);\n  } catch (error) {\n    res.status(400).json({\n      error\n    });\n    return;\n  }\n\n  var {\n    room_id,\n    user_name,\n    peer_id,\n    env,\n    role\n  } = payload;\n  let user_id;\n\n  if (user_name) {\n    user_id = uuid4() + user_name;\n  } else {\n    user_id = uuid4() + peer_id; //To be deprecated. This peer_id is incorrectly named\n  }\n\n  if (env in envMapping) {\n    const customer_id = process.env['CUSTOMER_ID'];\n    const secret = process.env['APP_SECRET'];\n    const access_key = process.env['APP_ACCESS_KEY'];\n    const app_id = process.env['APP_ID'];\n    const token_variables = {\n      access_key: access_key,\n      app_id: app_id,\n      room_id: room_id,\n      user_id: user_id,\n      role: role\n    };\n    generateToken({\n      token_variables,\n      secret,\n      customer_id,\n      res\n    });\n  } else {\n    res.status(400).json({\n      error: {\n        message: 'Wrong env specified'\n      }\n    });\n  }\n});","map":{"version":3,"sources":["/Users/Pravin/Study/nikhil/react/sample-app-web/src/pages/api/token.js"],"names":["jwt","uuid4","envMapping","generateToken","token_variables","secret","customer_id","res","sign","algorithm","expiresIn","issuer","jwtid","error","token","status","json","req","setHeader","payload","JSON","parse","body","room_id","user_name","peer_id","env","role","user_id","process","access_key","app_id","message"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,cAAhB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,iBAA3B;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA,eAAF;AAAmBC,EAAAA,MAAnB;AAA2BC,EAAAA,WAA3B;AAAwCC,EAAAA;AAAxC,CAAD,KAAmD;AACvEP,EAAAA,GAAG,CAACQ,IAAJ,CACEJ,eADF,EAEEC,MAFF,EAGE;AACEI,IAAAA,SAAS,EAAE,OADb;AAEEC,IAAAA,SAAS,EAAE,KAFb;AAGEC,IAAAA,MAAM,EAAEL,WAHV;AAIEM,IAAAA,KAAK,EAAEX,KAAK;AAJd,GAHF,EASE,UAAUY,KAAV,EAAiBC,KAAjB,EAAwB;AACtB,QAAID,KAAJ,EAAW;AACTN,MAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEH,QAAAA;AAAF,OAArB;AACD,KAFD,MAEO;AACLN,MAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEF,QAAAA;AAAF,OAArB;AACD;AACF,GAfH;AAiBD,CAlBD;;AAoBA,gBAAe,OAAOG,GAAP,EAAYV,GAAZ,KAAoB;AACjCA,EAAAA,GAAG,CAACW,SAAJ,CAAc,6BAAd,EAA6C,GAA7C;AACAX,EAAAA,GAAG,CAACW,SAAJ,CAAc,8BAAd,EAA8C,GAA9C;AACA,MAAIC,OAAJ;;AACA,MAAI;AACFA,IAAAA,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWJ,GAAG,CAACK,IAAf,CAAV;AACD,GAFD,CAEE,OAAOT,KAAP,EAAc;AACdN,IAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEH,MAAAA;AAAF,KAArB;AACA;AACD;;AAED,MAAI;AAAEU,IAAAA,OAAF;AAAWC,IAAAA,SAAX;AAAsBC,IAAAA,OAAtB;AAA+BC,IAAAA,GAA/B;AAAoCC,IAAAA;AAApC,MAA6CR,OAAjD;AACA,MAAIS,OAAJ;;AACA,MAAIJ,SAAJ,EAAe;AACbI,IAAAA,OAAO,GAAG3B,KAAK,KAAKuB,SAApB;AACD,GAFD,MAEO;AACLI,IAAAA,OAAO,GAAG3B,KAAK,KAAKwB,OAApB,CADK,CACwB;AAC9B;;AACD,MAAIC,GAAG,IAAIxB,UAAX,EAAuB;AACrB,UAAMI,WAAW,GAAGuB,OAAO,CAACH,GAAR,CAAY,aAAZ,CAApB;AACA,UAAMrB,MAAM,GAAGwB,OAAO,CAACH,GAAR,CAAY,YAAZ,CAAf;AACA,UAAMI,UAAU,GAAGD,OAAO,CAACH,GAAR,CAAY,gBAAZ,CAAnB;AACA,UAAMK,MAAM,GAAGF,OAAO,CAACH,GAAR,CAAY,QAAZ,CAAf;AACA,UAAMtB,eAAe,GAAG;AACtB0B,MAAAA,UAAU,EAAEA,UADU;AAEtBC,MAAAA,MAAM,EAAEA,MAFc;AAGtBR,MAAAA,OAAO,EAAEA,OAHa;AAItBK,MAAAA,OAAO,EAAEA,OAJa;AAKtBD,MAAAA,IAAI,EAAEA;AALgB,KAAxB;AAQAxB,IAAAA,aAAa,CAAC;AAAEC,MAAAA,eAAF;AAAmBC,MAAAA,MAAnB;AAA2BC,MAAAA,WAA3B;AAAwCC,MAAAA;AAAxC,KAAD,CAAb;AACD,GAdD,MAcO;AACLA,IAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEH,MAAAA,KAAK,EAAE;AAAEmB,QAAAA,OAAO,EAAE;AAAX;AAAT,KAArB;AACD;AACF,CAnCD","sourcesContent":["import jwt from 'jsonwebtoken';\nimport uuid4 from 'uuid4';\nimport { envMapping } from '../../constants';\n\nconst generateToken = ({ token_variables, secret, customer_id, res }) => {\n  jwt.sign(\n    token_variables,\n    secret,\n    {\n      algorithm: 'HS256',\n      expiresIn: '24h',\n      issuer: customer_id,\n      jwtid: uuid4(),\n    },\n    function (error, token) {\n      if (error) {\n        res.status(400).json({ error });\n      } else {\n        res.status(200).json({ token });\n      }\n    }\n  );\n};\n\nexport default async (req, res) => {\n  res.setHeader('Access-Control-Allow-Origin', '*');\n  res.setHeader('Access-Control-Allow-Methods', '*');\n  let payload;\n  try {\n    payload = JSON.parse(req.body);\n  } catch (error) {\n    res.status(400).json({ error });\n    return;\n  }\n\n  var { room_id, user_name, peer_id, env, role } = payload;\n  let user_id;\n  if (user_name) {\n    user_id = uuid4() + user_name;\n  } else {\n    user_id = uuid4() + peer_id; //To be deprecated. This peer_id is incorrectly named\n  }\n  if (env in envMapping) {\n    const customer_id = process.env['CUSTOMER_ID'];\n    const secret = process.env['APP_SECRET'];\n    const access_key = process.env['APP_ACCESS_KEY'];\n    const app_id = process.env['APP_ID'];\n    const token_variables = {\n      access_key: access_key,\n      app_id: app_id,\n      room_id: room_id,\n      user_id: user_id,\n      role: role,\n    };\n\n    generateToken({ token_variables, secret, customer_id, res });\n  } else {\n    res.status(400).json({ error: { message: 'Wrong env specified' } });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}