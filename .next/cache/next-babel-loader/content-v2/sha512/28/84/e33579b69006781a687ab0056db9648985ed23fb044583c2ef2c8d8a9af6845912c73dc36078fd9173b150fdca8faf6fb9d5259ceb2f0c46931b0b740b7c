{"ast":null,"code":"import _defineProperty from \"/Users/Pravin/Study/nikhil/react/sample-app-web/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"/Users/Pravin/Study/nikhil/react/sample-app-web/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React from 'react';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Bowser from 'bowser';\n\nvar closeMediaStream = function closeMediaStream(stream) {\n  if (!stream) {\n    return;\n  }\n\n  if (MediaStreamTrack && MediaStreamTrack.prototype && MediaStreamTrack.prototype.stop) {\n    var tracks, i, len;\n\n    if (stream.getTracks) {\n      tracks = stream.getTracks();\n\n      for (i = 0, len = tracks.length; i < len; i += 1) {\n        tracks[i].stop();\n      }\n    } else {\n      tracks = stream.getAudioTracks();\n\n      for (i = 0, len = tracks.length; i < len; i += 1) {\n        tracks[i].stop();\n      }\n\n      tracks = stream.getVideoTracks();\n\n      for (i = 0, len = tracks.length; i < len; i += 1) {\n        tracks[i].stop();\n      }\n    } // Deprecated by the spec, but still in use.\n\n  } else if (typeof stream.stop === 'function') {\n    console.log('closeMediaStream() | calling stop() on the MediaStream');\n    stream.stop();\n  }\n}; // Attach a media stream to an element.\n\n\nvar attachMediaStream = function attachMediaStream(element, stream) {\n  element.srcObject = stream;\n};\n\nvar updateInputDevices = function updateInputDevices() {\n  return new Promise(function (pResolve, pReject) {\n    var videoDevices = [];\n    var audioDevices = [];\n    var audioOutputDevices = [];\n    navigator.mediaDevices.enumerateDevices().then(function (devices) {\n      var _iterator = _createForOfIteratorHelper(devices),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var device = _step.value;\n\n          if (device.kind === 'videoinput') {\n            videoDevices.push(device);\n          } else if (device.kind === 'audioinput') {\n            audioDevices.push(device);\n          } else if (device.kind === 'audiooutput') {\n            audioOutputDevices.push(device);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }).then(function () {\n      var data = {\n        videoDevices: videoDevices,\n        audioDevices: audioDevices,\n        audioOutputDevices: audioOutputDevices\n      };\n      pResolve(data);\n    });\n  });\n};\n\nvar SingleSelect = function SingleSelect(_ref) {\n  var field = _ref.field,\n      form = _ref.form,\n      props = _objectWithoutProperties(_ref, [\"field\", \"form\"]);\n\n  //TODO specific input for devices\n  var name = field.name,\n      label = field.label;\n  var options = props.options,\n      updateDevice = props.updateDevice;\n  var setFieldValue = form.setFieldValue;\n  return __jsx(FormControl, {\n    variant: \"outlined\"\n  }, __jsx(InputLabel, {\n    id: \"demo-simple-select-outlined-label\"\n  }, label), __jsx(Select, {\n    labelId: \"demo-simple-select-outlined-label\",\n    id: \"demo-simple-select-outlined\",\n    value: form.values[name],\n    label: label,\n    renderValue: function renderValue(value) {\n      return options.find(function (device) {\n        return device.deviceId === value;\n      }).label;\n    }\n  }, options && options.map(function (option, index) {\n    return __jsx(\"div\", {\n      onClick: function onClick(e) {\n        e.preventDefault();\n        setFieldValue(name, option.deviceId);\n        updateDevice(name, option.deviceId);\n      },\n      key: index\n    }, __jsx(MenuItem, {\n      key: index,\n      value: option.deviceId\n    }, option.label));\n  })));\n};\n\nvar getRequest = function getRequest() {\n  var url = location.search;\n  var theRequest = new Object();\n\n  if (url.indexOf('?') != -1) {\n    var str = url.substr(1);\n    var strs = str.split('&');\n\n    for (var i = 0; i < strs.length; i++) {\n      theRequest[strs[i].split('=')[0]] = decodeURI(strs[i].split('=')[1]);\n    }\n  }\n\n  return theRequest;\n};\n\nvar deviceSupport = function deviceSupport() {\n  var browser = Bowser.getParser(window.navigator.userAgent);\n\n  if (browser.getOS().name == 'iOS') {\n    return {\n      supported: false,\n      failureCause: 'iOS'\n    };\n  } else if (browser.getBrowserName() != 'Chrome') {\n    return {\n      supported: false,\n      failureCause: 'browser'\n    };\n  }\n\n  return {\n    supported: true,\n    failureCause: null\n  }; //TODO replace with firebase\n\n  var isValidBrowser = browser.satisfies({\n    //TODO add precise versions after checking with browserstack\n    windows: {\n      'internet explorer': '>10',\n      safari: '>9999',\n      chrome: '>57',\n      firefox: '>52',\n      opera: '>44'\n    },\n    linux: {\n      safari: '>9999',\n      chrome: '>57',\n      firefox: '>52',\n      opera: '>44'\n    },\n    macos: {\n      safari: '>9999',\n      chrome: '>57',\n      firefox: '>52',\n      opera: '>44'\n    },\n    ios: {\n      safari: '>9999',\n      firefox: '>9999',\n      opera: '>9999',\n      chrome: '>9999'\n    },\n    android: {\n      safari: '>9999',\n      chrome: '>57',\n      firefox: '>52',\n      opera: '>44'\n    },\n    'Chrome OS': {\n      safari: '>9999',\n      chrome: '>57',\n      firefox: '>52',\n      opera: '>44'\n    }\n  });\n  return isValidBrowser;\n};\n\nvar localStreamErrors = new Map(); //required track is missing\n\nlocalStreamErrors.set('NotFoundError', {\n  title: 'Camera/Microphone not detected!',\n  message: 'We were unable to detect any camera/microphone devices. Please connect and try again.'\n}); //webcam or mic are already in use\n\nlocalStreamErrors.set('NotReadableError', {\n  title: 'Camera/Microphone not accessible!',\n  message: 'Please close any other application using camera/microphone and try again.'\n}); //constraints can not be satisfied by avb. devices\n\nlocalStreamErrors.set('OverconstrainedError', {\n  title: 'Invalid Audio/Video constraints',\n  message: 'The constraints provided for audio/video cannot be met.'\n}); //permission denied in browser\n\nlocalStreamErrors.set('NotAllowedError', {\n  title: 'Permission Denied!',\n  message: 'Please grant camera/microphone permissions in the address bar or site settings and try again.'\n}); // returning null continues the call without error modal.\n\nlocalStreamErrors.set('TypeError', null);\n\nvar getLocalStreamException = function getLocalStreamException(error) {\n  var errorMessage = null;\n\n  if (localStreamErrors.has(error.name)) {\n    errorMessage = localStreamErrors.get(error.name);\n  } else {\n    //other errors\n    errorMessage = {\n      title: 'Unable to access camera/microphone!',\n      message: 'Please switch your device and try again.'\n    };\n  }\n\n  console.log('LocalStream error: ', _objectSpread({\n    error: error.name\n  }, errorMessage));\n  return errorMessage;\n};\n\nvar getUserMedia = function getUserMedia(constraints) {\n  // Older browsers might not implement mediaDevices at all, so we set an empty object first\n  if (navigator.mediaDevices === undefined) {\n    navigator.mediaDevices = {};\n  } // Some browsers partially implement mediaDevices. We can't just assign an object\n  // with getUserMedia as it would overwrite existing properties.\n  // Here, we will just add the getUserMedia property if it's missing.\n\n\n  if (navigator.mediaDevices.getUserMedia === undefined) {\n    navigator.mediaDevices.getUserMedia = function (constraints) {\n      // First get ahold of the legacy getUserMedia, if present\n      var getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia; // Some browsers just don't implement it - return a rejected promise with an error\n      // to keep a consistent interface\n\n      if (!getUserMedia) {\n        return Promise.reject(new Error('getUserMedia is not implemented in this browser'));\n      } // Otherwise, wrap the call to the old navigator.getUserMedia with a Promise\n\n\n      return new Promise(function (resolve, reject) {\n        getUserMedia.call(navigator, constraints, resolve, reject);\n      });\n    };\n  } else {\n    return navigator.mediaDevices.getUserMedia(constraints);\n  }\n};\n\nfunction getPermissionStatus() {\n  return new Promise(function (resolve, reject) {\n    navigator.mediaDevices.enumerateDevices().then(function (devices) {\n      var audio = devices.some(function (val) {\n        return val.kind === 'audioinput' && val.label !== '';\n      });\n      var video = devices.some(function (val) {\n        return val.kind === 'videoinput' && val.label !== '';\n      });\n\n      if (audio && video) {\n        resolve(true);\n      }\n\n      reject();\n    })[\"catch\"](function (err) {\n      return reject(error);\n    });\n  });\n}\n\nexport { closeMediaStream, attachMediaStream, updateInputDevices, SingleSelect, getRequest, deviceSupport, getLocalStreamException, getUserMedia, getPermissionStatus };","map":null,"metadata":{},"sourceType":"module"}