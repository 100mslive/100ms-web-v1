{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Bowser from 'bowser';\n\nconst closeMediaStream = function (stream) {\n  if (!stream) {\n    return;\n  }\n\n  if (MediaStreamTrack && MediaStreamTrack.prototype && MediaStreamTrack.prototype.stop) {\n    var tracks, i, len;\n\n    if (stream.getTracks) {\n      tracks = stream.getTracks();\n\n      for (i = 0, len = tracks.length; i < len; i += 1) {\n        tracks[i].stop();\n      }\n    } else {\n      tracks = stream.getAudioTracks();\n\n      for (i = 0, len = tracks.length; i < len; i += 1) {\n        tracks[i].stop();\n      }\n\n      tracks = stream.getVideoTracks();\n\n      for (i = 0, len = tracks.length; i < len; i += 1) {\n        tracks[i].stop();\n      }\n    } // Deprecated by the spec, but still in use.\n\n  } else if (typeof stream.stop === 'function') {\n    console.log('closeMediaStream() | calling stop() on the MediaStream');\n    stream.stop();\n  }\n}; // Attach a media stream to an element.\n\n\nconst attachMediaStream = function (element, stream) {\n  element.srcObject = stream;\n};\n\nconst updateInputDevices = () => {\n  return new Promise((pResolve, pReject) => {\n    let videoDevices = [];\n    let audioDevices = [];\n    let audioOutputDevices = [];\n    navigator.mediaDevices.enumerateDevices().then(devices => {\n      for (let device of devices) {\n        if (device.kind === 'videoinput') {\n          videoDevices.push(device);\n        } else if (device.kind === 'audioinput') {\n          audioDevices.push(device);\n        } else if (device.kind === 'audiooutput') {\n          audioOutputDevices.push(device);\n        }\n      }\n    }).then(() => {\n      let data = {\n        videoDevices,\n        audioDevices,\n        audioOutputDevices\n      };\n      pResolve(data);\n    });\n  });\n};\n\nconst SingleSelect = (_ref) => {\n  let {\n    field,\n    form\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"field\", \"form\"]);\n\n  //TODO specific input for devices\n  const {\n    name,\n    label\n  } = field;\n  const {\n    options,\n    updateDevice\n  } = props;\n  const {\n    setFieldValue\n  } = form;\n  return __jsx(FormControl, {\n    variant: \"outlined\"\n  }, __jsx(InputLabel, {\n    id: \"demo-simple-select-outlined-label\"\n  }, label), __jsx(Select, {\n    labelId: \"demo-simple-select-outlined-label\",\n    id: \"demo-simple-select-outlined\",\n    value: form.values[name],\n    label: label,\n    renderValue: value => options.find(device => device.deviceId === value).label\n  }, options && options.map((option, index) => __jsx(\"div\", {\n    onClick: e => {\n      e.preventDefault();\n      setFieldValue(name, option.deviceId);\n      updateDevice(name, option.deviceId);\n    },\n    key: index\n  }, __jsx(MenuItem, {\n    key: index,\n    value: option.deviceId\n  }, option.label)))));\n};\n\nconst getRequest = () => {\n  let url = location.search;\n  let theRequest = new Object();\n\n  if (url.indexOf('?') != -1) {\n    let str = url.substr(1);\n    let strs = str.split('&');\n\n    for (let i = 0; i < strs.length; i++) {\n      theRequest[strs[i].split('=')[0]] = decodeURI(strs[i].split('=')[1]);\n    }\n  }\n\n  return theRequest;\n};\n\nconst deviceSupport = () => {\n  const browser = Bowser.getParser(window.navigator.userAgent);\n\n  if (browser.getOS().name == 'iOS') {\n    return {\n      supported: false,\n      failureCause: 'iOS'\n    };\n  } else if (browser.getBrowserName() != 'Chrome') {\n    return {\n      supported: false,\n      failureCause: 'browser'\n    };\n  }\n\n  return {\n    supported: true,\n    failureCause: null\n  }; //TODO replace with firebase\n\n  const isValidBrowser = browser.satisfies({\n    //TODO add precise versions after checking with browserstack\n    windows: {\n      'internet explorer': '>10',\n      safari: '>9999',\n      chrome: '>57',\n      firefox: '>52',\n      opera: '>44'\n    },\n    linux: {\n      safari: '>9999',\n      chrome: '>57',\n      firefox: '>52',\n      opera: '>44'\n    },\n    macos: {\n      safari: '>9999',\n      chrome: '>57',\n      firefox: '>52',\n      opera: '>44'\n    },\n    ios: {\n      safari: '>9999',\n      firefox: '>9999',\n      opera: '>9999',\n      chrome: '>9999'\n    },\n    android: {\n      safari: '>9999',\n      chrome: '>57',\n      firefox: '>52',\n      opera: '>44'\n    },\n    'Chrome OS': {\n      safari: '>9999',\n      chrome: '>57',\n      firefox: '>52',\n      opera: '>44'\n    }\n  });\n  return isValidBrowser;\n};\n\nlet localStreamErrors = new Map(); //required track is missing\n\nlocalStreamErrors.set('NotFoundError', {\n  title: 'Camera/Microphone not detected!',\n  message: 'We were unable to detect any camera/microphone devices. Please connect and try again.'\n}); //webcam or mic are already in use\n\nlocalStreamErrors.set('NotReadableError', {\n  title: 'Camera/Microphone not accessible!',\n  message: 'Please close any other application using camera/microphone and try again.'\n}); //constraints can not be satisfied by avb. devices\n\nlocalStreamErrors.set('OverconstrainedError', {\n  title: 'Invalid Audio/Video constraints',\n  message: 'The constraints provided for audio/video cannot be met.'\n}); //permission denied in browser\n\nlocalStreamErrors.set('NotAllowedError', {\n  title: 'Permission Denied!',\n  message: 'Please grant camera/microphone permissions in the address bar or site settings and try again.'\n}); // returning null continues the call without error modal.\n\nlocalStreamErrors.set('TypeError', null);\n\nconst getLocalStreamException = error => {\n  let errorMessage = null;\n\n  if (localStreamErrors.has(error.name)) {\n    errorMessage = localStreamErrors.get(error.name);\n  } else {\n    //other errors\n    errorMessage = {\n      title: 'Unable to access camera/microphone!',\n      message: 'Please switch your device and try again.'\n    };\n  }\n\n  console.log('LocalStream error: ', _objectSpread({\n    error: error.name\n  }, errorMessage));\n  return errorMessage;\n};\n\nconst getUserMedia = constraints => {\n  // Older browsers might not implement mediaDevices at all, so we set an empty object first\n  if (navigator.mediaDevices === undefined) {\n    navigator.mediaDevices = {};\n  } // Some browsers partially implement mediaDevices. We can't just assign an object\n  // with getUserMedia as it would overwrite existing properties.\n  // Here, we will just add the getUserMedia property if it's missing.\n\n\n  if (navigator.mediaDevices.getUserMedia === undefined) {\n    navigator.mediaDevices.getUserMedia = function (constraints) {\n      // First get ahold of the legacy getUserMedia, if present\n      var getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia; // Some browsers just don't implement it - return a rejected promise with an error\n      // to keep a consistent interface\n\n      if (!getUserMedia) {\n        return Promise.reject(new Error('getUserMedia is not implemented in this browser'));\n      } // Otherwise, wrap the call to the old navigator.getUserMedia with a Promise\n\n\n      return new Promise(function (resolve, reject) {\n        getUserMedia.call(navigator, constraints, resolve, reject);\n      });\n    };\n  } else {\n    return navigator.mediaDevices.getUserMedia(constraints);\n  }\n};\n\nfunction getPermissionStatus() {\n  return new Promise((resolve, reject) => {\n    navigator.mediaDevices.enumerateDevices().then(devices => {\n      const audio = devices.some(val => val.kind === 'audioinput' && val.label !== '');\n      const video = devices.some(val => val.kind === 'videoinput' && val.label !== '');\n\n      if (audio && video) {\n        resolve(true);\n      }\n\n      reject();\n    }).catch(err => reject(error));\n  });\n}\n\nexport { closeMediaStream, attachMediaStream, updateInputDevices, SingleSelect, getRequest, deviceSupport, getLocalStreamException, getUserMedia, getPermissionStatus };","map":null,"metadata":{},"sourceType":"module"}