{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { Layout, Button, Modal, notification, Spin } from 'antd';\nconst {\n  confirm\n} = Modal;\nconst {\n  Header,\n  Content,\n  Sider\n} = Layout;\nimport MediaSettings from './Settings';\nimport ChatFeed from './Chat';\nimport Message from './Chat/message';\nimport { AppContextProvider, AppContext } from '../stores/AppContext';\nimport LoginForm from './LoginForm';\nimport Conference from './Conference';\nimport { HMSClient, HMSPeer, HMSClientConfig } from '@100mslive/hmsvideo-web';\nimport { ENVS, ROLES } from '../constants';\nimport { dependencies } from '../../package.json';\nimport { getRequest } from '../utils';\nconst sdkVersion = dependencies['@100mslive/hmsvideo-web'].substring(1);\nconsole.info(`Using hmsvideo-web SDK version ${sdkVersion}`);\n\nasync function getToken({\n  room_id,\n  user_name,\n  role = 'guest',\n  env\n}) {\n  const endpoint = process.env.NEXT_PUBLIC_TOKEN_ENDPOINT || '/api/token';\n  const {\n    token\n  } = await fetch(endpoint, {\n    method: 'POST',\n    body: JSON.stringify({\n      room_id,\n      user_name,\n      env,\n      role\n    })\n  }).then(response => response.json()).catch(err => console.log('Error client token: ', err));\n  return token;\n}\n\nclass OldAppUI extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"_cleanUp\", async (shouldRedirectToHome = true) => {\n      if (shouldRedirectToHome) {\n        window.history.pushState({}, '100ms', `${window.location.protocol}//${window.location.host}`);\n        this.conference && (await this.conference.cleanUp());\n        this.props.client && (await this.props.client.disconnect());\n        this.props.setClient(null);\n        this.props.setRoomState({\n          isConnected: false,\n          login: false\n        });\n      } else {\n        window.location.reload();\n      }\n    });\n\n    _defineProperty(this, \"_notification\", (message, description) => {\n      notification.info({\n        message: message,\n        description: description,\n        placement: 'bottomRight'\n      });\n    });\n\n    _defineProperty(this, \"_createClient\", async ({\n      userName,\n      env,\n      roomId,\n      role\n    }) => {\n      let url = `wss://${env}.100ms.live`;\n      let authToken = await getToken({\n        env,\n        room_id: roomId,\n        user_name: userName,\n        role\n      });\n      console.log(`%cTOKEN IS: ${authToken}`, 'color: orange');\n      console.log('Websocket URL', url);\n\n      try {\n        let peer = new HMSPeer(userName, authToken);\n        let config = new HMSClientConfig({\n          endpoint: url\n        });\n        return new HMSClient(peer, config);\n      } catch (err) {\n        console.error('ERROR: ', err);\n        alert('Invalid token');\n      }\n    });\n\n    _defineProperty(this, \"_handleJoin\", async () => {\n      this.props.setRoomState({\n        loading: true\n      });\n\n      this.hideMessage = () => {}; //TODO this should reflect in initialization as well\n\n\n      ![ROLES.LIVE_RECORD, ROLES.VIEWER].includes(this.role) && this._onMediaSettingsChanged(this.props.settings.selectedAudioDevice, this.props.settings.selectedVideoDevice, this.props.settings.resolution, this.props.settings.bandwidth, this.props.settings.codec, this.props.settings.frameRate, this.props.settings.isDevMode);\n      let client = await this._createClient({\n        userName: this.props.loginInfo.displayName,\n        env: this.props.loginInfo.env,\n        roomId: this.props.loginInfo.roomId,\n        role: this.props.loginInfo.role\n      });\n      client.connect().catch(error => {\n        alert(error.message);\n      });\n\n      window.onunload = async () => {\n        await this._cleanUp();\n      };\n\n      client.on('peer-join', (room, peer) => {\n        this._notification('Peer Join', `peer => ${peer.name} joined ${room}!`);\n      });\n      client.on('peer-leave', (room, peer) => {\n        this._notification('Peer Leave', `peer => ${peer.name} left ${room}!`);\n      });\n      client.on('connect', () => {\n        console.log('on connect called');\n        if (this.props.roomState.isConnected) return;\n        console.log('connected!');\n\n        this._handleTransportOpen();\n      });\n      client.on('disconnect', () => {\n        console.log('disconnected!');\n        this.props.setRoomState({\n          loading: false\n        });\n      });\n      client.on('stream-add', (room, peer, streamInfo) => {\n        console.log('stream-add', JSON.stringify({\n          room,\n          peer,\n          streamInfo\n        }, null, 2));\n      });\n      client.on('stream-remove', (room, peer, streamInfo) => {\n        console.log('stream-remove', JSON.stringify({\n          room,\n          peer,\n          streamInfo\n        }, null, 2));\n      });\n      client.on('broadcast', (room, peer, message) => {\n        console.log('broadcast: ', room, peer.name, message);\n\n        this._onMessageReceived(peer.name, message);\n      });\n      client.on('disconnected', async () => {\n        console.log(`%c[APP] TEARING DOWN`, 'color:#fc0');\n        location.reload();\n      });\n      this.props.setClient(client);\n    });\n\n    _defineProperty(this, \"_handleTransportOpen\", async () => {\n      this.props.setRoomState({\n        isConnected: true\n      });\n\n      try {\n        await this.props.client.join(this.props.loginInfo.roomId).catch(error => {\n          console.log('JOIN ERROR:', error);\n        });\n        let redirectURL = `${window.location.protocol}//${window.location.host}/?room=${this.props.loginInfo.roomId}&env=${this.props.loginInfo.env}&role=${this.props.loginInfo.role}`;\n        window.history.pushState({}, '100ms', redirectURL);\n        this.props.setRoomState({\n          login: true,\n          loading: false\n        });\n\n        this._notification('Connected!', `Welcome to the ${this.props.loginInfo.roomName || '100ms'} room => ${this.props.loginInfo.roomId}`); // Local video & audio are disabled for the 'live-record'\n        // and 'viewer' roles. Their local stream is also not published.\n\n\n        if (![ROLES.LIVE_RECORD, ROLES.VIEWER].includes(this.props.loginInfo.role)) {\n          await this.conference.handleLocalStream();\n        }\n      } catch (error) {\n        console.error('HANDLE THIS ERROR: ', error);\n      }\n    });\n\n    _defineProperty(this, \"_handleLeave\", async () => {\n      let this2 = this;\n      confirm({\n        title: 'Leave Now?',\n        content: 'Do you want to leave the room?',\n\n        async onOk() {\n          await this2._cleanUp();\n          this2.props.setRoomState({\n            login: false\n          });\n        },\n\n        onCancel() {\n          console.log('Cancel');\n        }\n\n      });\n    });\n\n    _defineProperty(this, \"_handleAudioTrackEnabled\", enabled => {\n      this.props.setRoomState({\n        localAudioEnabled: enabled\n      });\n      this.conference.muteMediaTrack('audio', enabled);\n    });\n\n    _defineProperty(this, \"_handleVideoTrackEnabled\", enabled => {\n      this.props.setRoomState({\n        localVideoEnabled: enabled\n      });\n      this.conference.muteMediaTrack('video', enabled);\n    });\n\n    _defineProperty(this, \"_handleScreenSharing\", enabled => {\n      this.props.setRoomState({\n        screenSharingEnabled: enabled\n      });\n      this.conference.handleScreenSharing(enabled);\n    });\n\n    _defineProperty(this, \"_onRef\", ref => {\n      this.conference = ref;\n    });\n\n    _defineProperty(this, \"_openOrCloseLeftContainer\", collapsed => {\n      this.props.setRoomState({\n        collapsed: collapsed,\n        hasUnreadMessages: false\n      });\n    });\n\n    _defineProperty(this, \"_onMediaSettingsChanged\", (selectedAudioDevice, selectedVideoDevice, resolution, bandwidth, codec, frameRate, isDevMode, reloadPage = false) => {\n      this.props.setSettings({\n        selectedAudioDevice,\n        selectedVideoDevice,\n        resolution,\n        bandwidth,\n        codec,\n        frameRate,\n        isDevMode\n      });\n      const constraints = {\n        frameRate: frameRate,\n        bitrate: bandwidth,\n        resolution: resolution,\n        advancedMediaConstraints: {\n          audio: {\n            deviceId: selectedAudioDevice\n          },\n          video: {\n            deviceId: selectedVideoDevice\n          }\n        }\n      };\n\n      if (reloadPage) {\n        this.props.client && this.props.client.applyConstraints(constraints, this.props.client.local);\n      }\n    });\n\n    _defineProperty(this, \"_onMessageReceived\", (from, message) => {\n      console.log('Received message:' + from + ':' + message);\n      let messages = this.props.roomState.messages;\n      let uid = 1;\n      messages.push(new Message({\n        id: uid,\n        message: message,\n        senderName: from\n      }));\n      let hasUnreadMessages = false;\n\n      if (this.props.roomState.collapsed) {\n        hasUnreadMessages = true;\n      }\n\n      this.props.setRoomState({\n        messages,\n        hasUnreadMessages\n      });\n    });\n\n    _defineProperty(this, \"_onSendMessage\", data => {\n      console.log('Send message:' + data);\n      var info = {\n        senderName: this.props.loginInfo.displayName,\n        msg: data\n      };\n      this.props.client.broadcast(info, this.props.client.rid);\n      let messages = this.props.roomState.messages;\n      let uid = 0;\n      messages.push(new Message({\n        id: uid,\n        message: data,\n        senderName: 'me'\n      }));\n      this.props.setRoomState({\n        messages\n      });\n    });\n\n    props.setClient(null);\n    props.setRoomState({\n      isConnected: false\n    });\n\n    if (!props.settings.codec) {\n      props.setSettings({\n        selectedAudioDevice: '',\n        selectedVideoDevice: '',\n        resolution: 'qvga',\n        bandwidth: 256,\n        codec: 'vp8',\n        frameRate: 20,\n        isDevMode: true\n      });\n    }\n  }\n\n  isValidParams() {\n    const validRoomPattern = /^[a-zA-Z0-9-.:_]*$/g;\n    const validRoles = Object.values(ROLES);\n    const validEnvs = Object.values(ENVS);\n\n    try {\n      const params = getRequest();\n\n      if (params.role && !validRoles.includes(params.role.toLowerCase())) {\n        return [false, 'Role'];\n      } else if (params.env && !validEnvs.includes(params.env.toLowerCase())) {\n        return [false, 'environment'];\n      } else if (params.room && !validRoomPattern.test(params.room)) {\n        return [false, 'Room ID'];\n      } else {\n        return [true, null];\n      }\n    } catch (error) {\n      if (error instanceof URIError) {\n        return [false, 'URL'];\n      }\n    }\n  }\n\n  render() {\n    const {\n      login,\n      loading,\n      localAudioEnabled,\n      localVideoEnabled,\n      screenSharingEnabled,\n      collapsed,\n      vidFit\n    } = this.props.roomState;\n    const isValidParams = this.isValidParams()[0];\n    return __jsx(Layout, {\n      className: \"app-layout\"\n    }, __jsx(Header, {\n      className: \"app-header\",\n      style: {\n        backgroundColor: '#1a1619',\n        zIndex: '10',\n        padding: '0 0',\n        margin: '0 auto',\n        width: '100%'\n      }\n    }, __jsx(\"div\", {\n      className: \"app-header-left\"\n    }, __jsx(\"a\", {\n      href: \"https://100ms.live/\",\n      target: \"_blank\"\n    }, __jsx(\"img\", {\n      src: \"/logo-blue-dark.svg\",\n      className: \"h-8\"\n    }), __jsx(\"h2\", {\n      class: \"d-inline mb-0 ml-2\"\n    }, \"100ms\"))), __jsx(\"div\", {\n      className: \"app-header-right\"\n    }, __jsx(MediaSettings, {\n      onMediaSettingsChanged: this._onMediaSettingsChanged,\n      settings: this.props.settings,\n      isLoggedIn: login,\n      setLocalStreamError: this.props.setLocalStreamError\n    }))), __jsx(Content, {\n      className: \"app-center-layout\"\n    }, !isValidParams ? __jsx(\"div\", {\n      className: \"min-h-screen flex items-center justify-center w-full py-8 px-4 sm:px-6 lg:px-8\",\n      style: {\n        backgroundColor: '#1a1619'\n      }\n    }, __jsx(\"div\", {\n      className: \"overflow-hidden shadow rounded-lg max-w-sm w-full px-4 py-5 p-6 bg-gray-100 my-3\"\n    }, __jsx(\"div\", {\n      className: \"\"\n    }, __jsx(\"h2\", {\n      className: \"mt-2 text-center text-3xl leading-9 font-extrabold text-gray-900\"\n    }, \"100ms Conference\"), __jsx(\"p\", {\n      className: \"mt-2 text-center text-sm leading-5 text-gray-600 mb-2\"\n    }, \"The requested \", this.isValidParams()[1], \" is invalid. Please verify your credentials.\"), __jsx(\"button\", {\n      className: \"group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm leading-5 font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none transition duration-150 ease-in-out\",\n      onClick: () => {\n        this._cleanUp();\n\n        location.reload();\n      }\n    }, \"Back to Home\")))) : login ? __jsx(Layout, {\n      className: \"app-content-layout\"\n    }, __jsx(Sider, {\n      width: 320,\n      collapsedWidth: 0,\n      trigger: null,\n      collapsible: true,\n      collapsed: collapsed,\n      style: {\n        backgroundColor: '#1a1619'\n      }\n    }, __jsx(\"div\", {\n      className: \"left-container\"\n    }, __jsx(ChatFeed, {\n      messages: this.props.roomState.messages,\n      onSendMessage: this._onSendMessage,\n      onClose: () => this._openOrCloseLeftContainer(!collapsed)\n    }))), __jsx(Layout, {\n      className: \"app-right-layout\",\n      style: {\n        height: 'calc(100vh - 64px)'\n      }\n    }, __jsx(Content, {\n      style: {\n        flex: 1,\n        position: 'relative'\n      }\n    }, __jsx(\"div\", null, __jsx(AppContext.Consumer, null, context => __jsx(Conference, {\n      roomName: this.props.loginInfo.roomName,\n      roomId: this.props.loginInfo.roomId,\n      collapsed: this.props.roomState.collapsed,\n      client: context.client,\n      settings: context.settings,\n      localAudioEnabled: localAudioEnabled,\n      localVideoEnabled: localVideoEnabled,\n      vidFit: vidFit,\n      loginInfo: this.props.loginInfo,\n      ref: ref => {\n        this.conference = ref;\n      },\n      onScreenToggle: () => this._handleScreenSharing(!screenSharingEnabled),\n      onLeave: this._handleLeave,\n      onChatToggle: () => {\n        this._openOrCloseLeftContainer(!collapsed);\n      },\n      isChatOpen: !this.props.roomState.collapsed,\n      cleanUp: this._cleanUp,\n      role: this.props.loginInfo.role,\n      hasUnreadMessages: this.props.roomState.hasUnreadMessages,\n      setLocalStreamError: this.props.setLocalStreamError\n    })))))) : loading ? __jsx(\"div\", {\n      className: \"flex items-center justify-center\",\n      style: {\n        height: 'calc(100vh - 64px)'\n      }\n    }, __jsx(Spin, {\n      size: \"large\",\n      tip: \"Connecting...\"\n    })) : __jsx(\"div\", {\n      className: \"relative w-full\"\n    }, __jsx(AppContext.Consumer, null, context => __jsx(LoginForm, {\n      settings: context.settings,\n      loginInfo: context.loginInfo,\n      setSettings: context.setSettings,\n      setLoginInfo: context.setLoginInfo,\n      handleLogin: this._handleJoin,\n      createClient: this._createClient,\n      client: context.client,\n      setClient: context.setClient,\n      roomState: context.roomState,\n      setRoomState: context.setRoomState,\n      setLocalStreamError: this.props.setLocalStreamError\n    }))), this.props.localStreamError && __jsx(Modal, {\n      visible: !!this.props.localStreamError,\n      title: this.props.localStreamError.title,\n      footer: [__jsx(Button, {\n        key: \"submit\",\n        type: \"primary\",\n        onClick: () => {\n          this._cleanUp(false);\n        }\n      }, \"Try Again\")]\n    }, __jsx(\"p\", null, this.props.localStreamError.message))));\n  }\n\n}\n\nclass OldApp extends React.Component {\n  render() {\n    return __jsx(AppContext.Consumer, null, context => __jsx(OldAppUI, {\n      settings: context.settings,\n      roomState: context.roomState,\n      loginInfo: context.loginInfo,\n      setSettings: context.setSettings,\n      setLoginInfo: context.setLoginInfo,\n      setRoomState: context.setRoomState,\n      setClient: context.setClient,\n      client: context.client,\n      localStreamError: context.localStreamError,\n      setLocalStreamError: context.setLocalStreamError\n    }));\n  }\n\n}\n\nclass App extends React.Component {\n  render() {\n    return __jsx(AppContextProvider, null, __jsx(OldApp, null));\n  }\n\n}\n\nexport default App;","map":null,"metadata":{},"sourceType":"module"}