{"ast":null,"code":"import _classCallCheck from \"/Users/Pravin/Study/nikhil/react/sample-app-web/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Pravin/Study/nikhil/react/sample-app-web/node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/Pravin/Study/nikhil/react/sample-app-web/node_modules/next/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/Pravin/Study/nikhil/react/sample-app-web/node_modules/next/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Pravin/Study/nikhil/react/sample-app-web/node_modules/next/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/Users/Pravin/Study/nikhil/react/sample-app-web/src/components/Chat/index.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport ChatBubble from './chatbubble';\nimport ChatInput from './chatinput';\n\nvar ChatFeed = /*#__PURE__*/function (_Component) {\n  _inherits(ChatFeed, _Component);\n\n  var _super = _createSuper(ChatFeed);\n\n  function ChatFeed(props) {\n    var _this;\n\n    _classCallCheck(this, ChatFeed);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      messages: props.messages || []\n    };\n    return _this;\n  }\n\n  _createClass(ChatFeed, [{\n    key: \"_scrollToBottom\",\n    value: function _scrollToBottom() {\n      var chat = this.refs.chat;\n\n      if (chat !== undefined) {\n        var scrollHeight = chat.scrollHeight;\n        var height = chat.clientHeight;\n        var maxScrollTop = scrollHeight - height;\n        ReactDOM.findDOMNode(chat).scrollTop = maxScrollTop > 0 ? maxScrollTop : 0;\n      }\n    }\n  }, {\n    key: \"_renderGroup\",\n    value: function _renderGroup(messages, index, id) {\n      var _this2 = this;\n\n      var group = [];\n\n      for (var i = index; messages[i] ? messages[i].id == id : false; i--) {\n        group.push(messages[i]);\n      }\n\n      var message_nodes = group.reverse().map(function (curr, index) {\n        return __jsx(ChatBubble, {\n          key: Math.random().toString(36),\n          message: curr,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 14\n          }\n        });\n      });\n      return __jsx(\"div\", {\n        key: Math.random().toString(36),\n        className: \"chatbubble-wrapper\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 7\n        }\n      }, message_nodes);\n    }\n  }, {\n    key: \"_renderMessages\",\n    value: function _renderMessages(messages) {\n      var _this3 = this;\n\n      var message_nodes = messages.map(function (curr, index) {\n        // Find diff in message type or no more messages\n        if ((messages[index + 1] ? false : true) || messages[index + 1].id != curr.id) {\n          return _this3._renderGroup(messages, index, curr.id);\n        }\n      }); // return nodes\n\n      return message_nodes;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      window.setTimeout(function () {\n        _this4._scrollToBottom();\n      }, 10);\n      var messages = [{\n        id: 0,\n        message: 'hello every one',\n        senderName: 'kevin kang'\n      }];\n      return __jsx(\"div\", {\n        id: \"chat-panel\",\n        className: \"flex flex-1 flex-col max-h-full\",\n        style: {\n          backgroundColor: '#000000'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 7\n        }\n      }, __jsx(\"div\", {\n        className: \"border-b border-gray-800 h-10 flex items-center justify-between pr-3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 9\n        }\n      }, __jsx(\"span\", {\n        className: \"title-chat\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }\n      }, \"Chat\"), __jsx(\"button\", {\n        className: \"text-white text-xl\",\n        onClick: this.props.onClose,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }\n      }, \"\\xD7\")), __jsx(\"div\", {\n        ref: \"chat\",\n        className: \"chat-history\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 9\n        }\n      }, __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }\n      }, this._renderMessages(this.props.messages))), __jsx(ChatInput, {\n        onSendMessage: this.props.onSendMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return ChatFeed;\n}(Component);\n\nexport { ChatFeed as default };\nChatFeed.propTypes = {\n  isTyping: PropTypes.bool,\n  messages: PropTypes.array.isRequired,\n  onSendMessage: PropTypes.func.isRequired\n};","map":{"version":3,"sources":["/Users/Pravin/Study/nikhil/react/sample-app-web/src/components/Chat/index.js"],"names":["React","Component","ReactDOM","PropTypes","ChatBubble","ChatInput","ChatFeed","props","state","messages","chat","refs","undefined","scrollHeight","height","clientHeight","maxScrollTop","findDOMNode","scrollTop","index","id","group","i","push","message_nodes","reverse","map","curr","Math","random","toString","_renderGroup","window","setTimeout","_scrollToBottom","message","senderName","backgroundColor","onClose","_renderMessages","onSendMessage","propTypes","isTyping","bool","array","isRequired","func"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport ChatBubble from './chatbubble';\nimport ChatInput from './chatinput';\n\nexport default class ChatFeed extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      messages: props.messages || [],\n    };\n  }\n\n  _scrollToBottom() {\n    const { chat } = this.refs;\n    if (chat !== undefined) {\n      const scrollHeight = chat.scrollHeight;\n      const height = chat.clientHeight;\n      const maxScrollTop = scrollHeight - height;\n      ReactDOM.findDOMNode(chat).scrollTop =\n        maxScrollTop > 0 ? maxScrollTop : 0;\n    }\n  }\n\n  _renderGroup(messages, index, id) {\n    var group = [];\n\n    for (var i = index; messages[i] ? messages[i].id == id : false; i--) {\n      group.push(messages[i]);\n    }\n\n    var message_nodes = group.reverse().map((curr, index) => {\n      return <ChatBubble key={Math.random().toString(36)} message={curr} />;\n    });\n    return (\n      <div key={Math.random().toString(36)} className=\"chatbubble-wrapper\">\n        {message_nodes}\n      </div>\n    );\n  }\n\n  _renderMessages(messages) {\n    var message_nodes = messages.map((curr, index) => {\n      // Find diff in message type or no more messages\n      if (\n        (messages[index + 1] ? false : true) ||\n        messages[index + 1].id != curr.id\n      ) {\n        return this._renderGroup(messages, index, curr.id);\n      }\n    });\n    // return nodes\n    return message_nodes;\n  }\n\n  render() {\n    window.setTimeout(() => {\n      this._scrollToBottom();\n    }, 10);\n\n    const messages = [\n      { id: 0, message: 'hello every one', senderName: 'kevin kang' },\n    ];\n\n    return (\n      <div\n        id=\"chat-panel\"\n        className=\"flex flex-1 flex-col max-h-full\"\n        style={{ backgroundColor: '#000000' }}\n      >\n        <div className=\"border-b border-gray-800 h-10 flex items-center justify-between pr-3\">\n          <span className=\"title-chat\">Chat</span>\n          <button className=\"text-white text-xl\" onClick={this.props.onClose}>\n            &times;\n          </button>\n        </div>\n\n        <div ref=\"chat\" className=\"chat-history\">\n          <div>{this._renderMessages(this.props.messages)}</div>\n        </div>\n        <ChatInput onSendMessage={this.props.onSendMessage} />\n      </div>\n    );\n  }\n}\n\nChatFeed.propTypes = {\n  isTyping: PropTypes.bool,\n  messages: PropTypes.array.isRequired,\n  onSendMessage: PropTypes.func.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}