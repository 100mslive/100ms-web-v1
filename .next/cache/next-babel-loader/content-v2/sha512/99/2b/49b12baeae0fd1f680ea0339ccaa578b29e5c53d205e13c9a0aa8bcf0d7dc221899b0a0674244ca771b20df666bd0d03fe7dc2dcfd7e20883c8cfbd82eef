{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { Button, InputNumber, Modal, Select, Tooltip } from 'antd';\nimport { attachMediaStream, closeMediaStream, updateInputDevices } from '../../utils';\nimport SoundMeter from './soundmeter';\nconst Option = Select.Option;\nexport default class MediaSettings extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"setDeviceState\", () => {\n      updateInputDevices().then(data => {\n        if (this.state.selectedAudioDevice === '' && data.audioDevices.length > 0) {\n          this.setState({\n            selectedAudioDevice: data.audioDevices[0].deviceId\n          });\n        }\n\n        if (this.state.selectedVideoDevice === '' && data.videoDevices.length > 0) {\n          this.setState({\n            selectedVideoDevice: data.videoDevices[0].deviceId\n          });\n        }\n\n        this.setState({\n          videoDevices: data.videoDevices,\n          audioDevices: data.audioDevices,\n          audioOutputDevices: data.audioOutputDevices\n        });\n        this.state.audioDevices.map((device, index) => {\n          if (this.state.selectedAudioDevice == device.deviceId) {\n            console.log('Selected audioDevice::' + JSON.stringify(device));\n          }\n        });\n        this.state.videoDevices.map((device, index) => {\n          if (this.state.selectedVideoDevice == device.deviceId) {\n            console.log('Selected videoDevice::' + JSON.stringify(device));\n          }\n        });\n      });\n    });\n\n    _defineProperty(this, \"soundMeterProcess\", () => {\n      var val = window.soundMeter.instant.toFixed(2) * 348 + 1;\n      this.setState({\n        audioLevel: val\n      });\n      if (this.state.visible) setTimeout(this.soundMeterProcess, 100);\n    });\n\n    _defineProperty(this, \"startPreview\", () => {\n      if (window.stream) {\n        closeMediaStream(window.stream);\n      }\n\n      let videoElement = this.refs['previewVideo'];\n      let audioSource = this.state.selectedAudioDevice;\n      let videoSource = this.state.selectedVideoDevice;\n      this.soundMeter = window.soundMeter = new SoundMeter(window.audioContext);\n      let soundMeterProcess = this.soundMeterProcess;\n      let constraints = {\n        audio: {\n          deviceId: audioSource ? {\n            exact: audioSource\n          } : undefined\n        },\n        video: {\n          deviceId: videoSource ? {\n            exact: videoSource\n          } : undefined\n        }\n      };\n      navigator.mediaDevices.getUserMedia(constraints).then(stream => {\n        window.stream = stream; // make stream available to console\n        //videoElement.srcObject = stream;\n\n        attachMediaStream(videoElement, stream);\n        soundMeter.connectToSource(stream);\n        setTimeout(soundMeterProcess, 100);\n        this.setDeviceState();\n      }).catch(error => {\n        this.props.setLocalStreamError(error);\n      });\n    });\n\n    _defineProperty(this, \"stopPreview\", () => {\n      if (window.stream) {\n        closeMediaStream(window.stream);\n      }\n    });\n\n    _defineProperty(this, \"showModal\", () => {\n      this.setState({\n        visible: true\n      });\n      setTimeout(this.startPreview, 100);\n    });\n\n    _defineProperty(this, \"handleOk\", e => {\n      this.setState({\n        visible: false\n      });\n      this.stopPreview();\n\n      if (this.props.onMediaSettingsChanged !== undefined) {\n        this.props.onMediaSettingsChanged(this.state.selectedAudioDevice, this.state.selectedVideoDevice, this.state.resolution, this.state.bandwidth, this.state.codec, this.state.frameRate, this.state.isDevMode, true);\n      }\n    });\n\n    _defineProperty(this, \"handleCancel\", e => {\n      let settings = this.props.settings;\n      this.setState(_objectSpread(_objectSpread({}, settings), {}, {\n        visible: false\n      }));\n      this.stopPreview();\n    });\n\n    _defineProperty(this, \"handleAudioDeviceChange\", e => {\n      this.setState({\n        selectedAudioDevice: e\n      });\n      setTimeout(this.startPreview, 100);\n    });\n\n    _defineProperty(this, \"handleVideoDeviceChange\", e => {\n      this.setState({\n        selectedVideoDevice: e\n      });\n      setTimeout(this.startPreview, 100);\n    });\n\n    _defineProperty(this, \"handleResolutionChange\", e => {\n      this.setState({\n        resolution: e\n      });\n    });\n\n    _defineProperty(this, \"handleVideoCodeChange\", e => {\n      this.setState({\n        codec: e\n      });\n    });\n\n    _defineProperty(this, \"handleBandWidthChange\", e => {\n      this.setState({\n        bandwidth: e\n      });\n    });\n\n    _defineProperty(this, \"handleFrameRateChange\", e => {\n      this.setState({\n        frameRate: e\n      });\n    });\n\n    _defineProperty(this, \"handleDevChange\", checked => {\n      this.setState({\n        isDevMode: checked\n      });\n    });\n\n    let _settings = props.settings;\n    this.state = {\n      visible: false,\n      videoDevices: [],\n      audioDevices: [],\n      audioOutputDevices: [],\n      resolution: _settings.resolution,\n      bandwidth: _settings.bandwidth,\n      selectedAudioDevice: _settings.selectedAudioDevice,\n      selectedVideoDevice: _settings.selectedVideoDevice,\n      codec: _settings.codec,\n      isDevMode: _settings.isDevMode,\n      frameRate: _settings.frameRate\n    };\n\n    try {\n      window.AudioContext = window.AudioContext || window.webkitAudioContext;\n      window.audioContext = new AudioContext();\n    } catch (e) {\n      console.log('Web Audio API not supported.');\n    }\n  }\n\n  componentDidMount() {\n    this.setDeviceState();\n  }\n\n  componentWillUnmount() {}\n\n  render() {\n    return __jsx(\"div\", null, __jsx(Tooltip, {\n      title: \"System setup\"\n    }, __jsx(Button, {\n      shape: \"circle\",\n      icon: \"setting\",\n      ghost: true,\n      onClick: this.showModal\n    })), __jsx(Modal, {\n      title: \"Settings\",\n      visible: this.state.visible,\n      onOk: this.handleOk,\n      onCancel: this.handleCancel,\n      okText: \"Ok\",\n      cancelText: \"Cancel\"\n    }, __jsx(\"div\", {\n      className: \"settings-item\"\n    }, __jsx(\"span\", {\n      className: \"settings-item-left\"\n    }, \"Micphone\"), __jsx(\"div\", {\n      className: \"settings-item-right\"\n    }, __jsx(Select, {\n      value: this.state.selectedAudioDevice,\n      style: {\n        width: 350\n      },\n      onChange: this.handleAudioDeviceChange\n    }, this.state.audioDevices.map((device, index) => {\n      return __jsx(Option, {\n        value: device.deviceId,\n        key: device.deviceId\n      }, device.label);\n    })), __jsx(\"div\", {\n      ref: \"progressbar\",\n      style: {\n        width: this.state.audioLevel + 'px',\n        height: '10px',\n        backgroundColor: '#8dc63f',\n        marginTop: '20px'\n      }\n    }))), __jsx(\"div\", {\n      className: \"settings-item\"\n    }, __jsx(\"span\", {\n      className: \"settings-item-left\"\n    }, \"Camera\"), __jsx(\"div\", {\n      className: \"settings-item-right\"\n    }, __jsx(Select, {\n      value: this.state.selectedVideoDevice,\n      style: {\n        width: 350\n      },\n      onChange: this.handleVideoDeviceChange\n    }, this.state.videoDevices.map((device, index) => {\n      return __jsx(Option, {\n        value: device.deviceId,\n        key: device.deviceId\n      }, device.label);\n    })), __jsx(\"div\", {\n      className: \"settings-video-container\"\n    }, __jsx(\"video\", {\n      id: \"previewVideo\",\n      ref: \"previewVideo\",\n      autoPlay: true,\n      playsInline: true,\n      muted: true,\n      style: {\n        width: '100%',\n        height: '100%',\n        objectFit: 'contain'\n      }\n    })))), __jsx(\"div\", {\n      className: \"settings-item\"\n    }, __jsx(\"span\", {\n      className: \"settings-item-left\"\n    }, \"Resolution\"), __jsx(\"div\", {\n      className: \"settings-item-right\"\n    }, __jsx(Select, {\n      style: {\n        width: 350\n      },\n      value: this.state.resolution,\n      onChange: this.handleResolutionChange\n    }, __jsx(Option, {\n      value: \"qqvga\"\n    }, \"QQVGA(160x90)\"), __jsx(Option, {\n      value: \"qvga\"\n    }, \"QVGA(320x180)\"), __jsx(Option, {\n      value: \"vga\"\n    }, \"VGA(640x360)\"), __jsx(Option, {\n      value: \"shd\"\n    }, \"SHD(960x540)\"), __jsx(Option, {\n      value: \"hd\"\n    }, \"HD(1280x720)\")))), !this.props.isLoggedIn && __jsx(\"div\", {\n      className: \"settings-item\"\n    }, __jsx(\"span\", {\n      className: \"settings-item-left\"\n    }, \"Codec\"), __jsx(\"div\", {\n      className: \"settings-item-right\"\n    }, __jsx(Select, {\n      style: {\n        width: 350\n      },\n      value: this.state.codec,\n      onChange: this.handleVideoCodeChange\n    }, __jsx(Option, {\n      value: \"h264\"\n    }, \"H264\"), __jsx(Option, {\n      value: \"vp8\"\n    }, \"VP8\"), __jsx(Option, {\n      value: \"vp9\"\n    }, \"VP9\")))), __jsx(\"div\", {\n      className: \"settings-item\"\n    }, __jsx(\"span\", {\n      className: \"settings-item-left\"\n    }, \"Bitrate\"), __jsx(\"div\", {\n      className: \"settings-item-right\"\n    }, __jsx(Select, {\n      style: {\n        width: 350\n      },\n      value: this.state.bandwidth,\n      onChange: this.handleBandWidthChange\n    }, __jsx(Option, {\n      value: \"100\"\n    }, \"Lowest(100kbps)\"), __jsx(Option, {\n      value: \"256\"\n    }, \"Low(256kbps)\"), __jsx(Option, {\n      value: \"512\"\n    }, \"Medium(512kbps)\"), __jsx(Option, {\n      value: \"1024\"\n    }, \"High(1Mbps)\"), __jsx(Option, {\n      value: \"4096\"\n    }, \"Lan(4Mbps)\")))), __jsx(\"div\", {\n      className: \"settings-item\"\n    }, __jsx(\"span\", {\n      className: \"settings-item-left\"\n    }, \"Frame Rate\"), __jsx(\"div\", {\n      className: \"settings-item-right\"\n    }, __jsx(InputNumber, {\n      min: 1,\n      max: 30,\n      defaultValue: this.state.frameRate,\n      onChange: this.handleFrameRateChange\n    })))));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}