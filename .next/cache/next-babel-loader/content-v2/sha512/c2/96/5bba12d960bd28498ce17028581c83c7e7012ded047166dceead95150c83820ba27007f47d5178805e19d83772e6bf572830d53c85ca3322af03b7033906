{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { getLocalStreamException } from '../utils';\nconst AppContext = /*#__PURE__*/React.createContext();\n\nclass AppContextProvider extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      client: null,\n      localStreamError: null,\n      loginInfo: {\n        roomName: '',\n        roomId: '',\n        displayName: '',\n        role: '',\n        env: ''\n      },\n      settings: {\n        selectedAudioDevice: '',\n        selectedVideoDevice: '',\n        resolution: 'qvga',\n        bandwidth: 256,\n        codec: 'vp8',\n        frameRate: 20,\n        isDevMode: false,\n        shouldApplyConstraints: false\n      },\n      roomState: {\n        isConnected: false,\n        login: false,\n        loading: false,\n        localAudioEnabled: true,\n        localVideoEnabled: true,\n        screenSharingEnabled: false,\n        collapsed: true,\n        isFullScreen: false,\n        vidFit: false,\n        messages: [],\n        hasUnreadMessages: false\n      }\n    });\n  }\n\n  render() {\n    return __jsx(AppContext.Provider, {\n      value: {\n        loginInfo: this.state.loginInfo,\n        settings: this.state.settings,\n        client: this.state.client,\n        localStreamError: this.state.localStreamError,\n        roomState: this.state.roomState,\n        setLocalStreamError: error => {\n          this.setState({\n            localStreamError: getLocalStreamException(error)\n          });\n        },\n        setSettings: (settings, cb) => {\n          this.setState({\n            settings: _objectSpread(_objectSpread({}, this.state.settings), settings)\n          }, () => {\n            cb && cb();\n          });\n        },\n        setLoginInfo: loginInfo => {\n          this.setState({\n            loginInfo: _objectSpread(_objectSpread({}, this.state.loginInfo), loginInfo)\n          });\n\n          if (loginInfo.displayName) {\n            localStorage.setItem('loginInfo.displayName', loginInfo.displayName);\n          }\n        },\n        setClient: client => {\n          this.setState({\n            client: client\n          });\n        },\n        setRoomState: roomState => {\n          this.setState({\n            roomState: _objectSpread(_objectSpread({}, this.state.roomState), roomState)\n          });\n        }\n      }\n    }, this.props.children);\n  }\n\n}\n\nexport { AppContext, AppContextProvider };","map":null,"metadata":{},"sourceType":"module"}