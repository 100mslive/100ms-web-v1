{"ast":null,"code":"/*\n *  Copyright (c) 2015 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n'use strict'; // Meter class that generates a number correlated to audio volume.\n// The meter class itself displays nothing, but it makes the\n// instantaneous and time-decaying volumes available for inspection.\n// It also reports on the fraction of samples that were at or near\n// the top of the measurement range.\n\nexport default class SoundMeter {\n  constructor(context) {\n    this.context = context;\n    this.instant = 0.0; //this.slow = 0.0;\n    //this.clip = 0.0;\n\n    this.script = context.createScriptProcessor(2048, 1, 1);\n    var that = this;\n\n    this.script.onaudioprocess = function (event) {\n      var input = event.inputBuffer.getChannelData(0);\n      var i;\n      var sum = 0.0;\n      var clipcount = 0;\n\n      for (i = 0; i < input.length; ++i) {\n        sum += input[i] * input[i];\n\n        if (Math.abs(input[i]) > 0.99) {\n          clipcount += 1;\n        }\n      }\n\n      that.instant = Math.sqrt(sum / input.length); //that.slow = 0.95 * that.slow + 0.05 * that.instant;\n      //that.clip = clipcount / input.length;\n    };\n  }\n\n  connectToSource(stream) {\n    this.mic = this.context.createMediaStreamSource(stream);\n    this.mic.connect(this.script); // necessary to make sample run, but should not be.\n\n    this.script.connect(this.context.destination);\n  }\n\n  stop() {\n    this.mic.disconnect();\n    this.script.disconnect();\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}