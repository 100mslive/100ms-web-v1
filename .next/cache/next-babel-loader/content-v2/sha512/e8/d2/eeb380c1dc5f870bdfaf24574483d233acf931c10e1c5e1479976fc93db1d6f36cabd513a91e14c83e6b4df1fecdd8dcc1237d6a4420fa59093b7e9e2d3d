{"ast":null,"code":"import axios from 'axios';\nimport jwt from 'jsonwebtoken';\nimport uuid4 from 'uuid4';\nimport { envMapping } from '../../constants';\n\nfunction getJWT(payload, secret) {\n  const issuer = process.env.CUSTOMER_ID;\n  return jwt.sign(payload, secret, {\n    algorithm: 'HS256',\n    expiresIn: '24h',\n    issuer: issuer,\n    jwtid: uuid4()\n  });\n}\n\nfunction getManagementToken() {\n  const accessKey = process.env.MANAGEMENT_KEY;\n  const secret = process.env.MANAGEMENT_SECRET;\n  const payload = {\n    access_key: accessKey\n  };\n  return getJWT(payload, secret);\n}\n\nexport default (async (req, res) => {\n  res.setHeader('Access-Control-Allow-Origin', '*');\n  res.setHeader('Access-Control-Allow-Methods', '*');\n  let payload;\n\n  try {\n    payload = JSON.parse(req.body);\n  } catch (error) {\n    res.status(400).json({\n      error\n    });\n    return;\n  }\n\n  let {\n    room_name,\n    recording_info,\n    env\n  } = payload;\n  env = env || 'prod-in';\n  let management_token = 'dummy';\n\n  if (env in envMapping) {\n    management_token = getManagementToken();\n  }\n\n  const options = {\n    method: 'post',\n    url: `https://${env}.100ms.live/api/v1/rooms`,\n    data: {\n      name: room_name,\n      description: 'nk room',\n      recording_info\n    },\n    headers: {\n      Authorization: `Bearer ${management_token}`,\n      'Content-Type': 'application/json'\n    }\n  };\n\n  try {\n    var resp = await axios(options);\n\n    if (resp.status == 200) {\n      res.status(200).json(resp.data);\n    } else {\n      res.status(resp.status).json(resp);\n    }\n  } catch (error) {\n    console.log(error);\n    res.status(500).json({\n      error\n    });\n  }\n});","map":{"version":3,"sources":["/Users/Pravin/Study/nikhil/react/sample-app-web/src/pages/api/room.js"],"names":["axios","jwt","uuid4","envMapping","getJWT","payload","secret","issuer","process","env","CUSTOMER_ID","sign","algorithm","expiresIn","jwtid","getManagementToken","accessKey","MANAGEMENT_KEY","MANAGEMENT_SECRET","access_key","req","res","setHeader","JSON","parse","body","error","status","json","room_name","recording_info","management_token","options","method","url","data","name","description","headers","Authorization","resp","console","log"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,iBAA3B;;AAEA,SAASC,MAAT,CAAgBC,OAAhB,EAAyBC,MAAzB,EAAiC;AAC/B,QAAMC,MAAM,GAAGC,OAAO,CAACC,GAAR,CAAYC,WAA3B;AAEA,SAAOT,GAAG,CAACU,IAAJ,CAASN,OAAT,EAAkBC,MAAlB,EAA0B;AAC/BM,IAAAA,SAAS,EAAE,OADoB;AAE/BC,IAAAA,SAAS,EAAE,KAFoB;AAG/BN,IAAAA,MAAM,EAAEA,MAHuB;AAI/BO,IAAAA,KAAK,EAAEZ,KAAK;AAJmB,GAA1B,CAAP;AAMD;;AAED,SAASa,kBAAT,GAA8B;AAC5B,QAAMC,SAAS,GAAGR,OAAO,CAACC,GAAR,CAAYQ,cAA9B;AACA,QAAMX,MAAM,GAAGE,OAAO,CAACC,GAAR,CAAYS,iBAA3B;AACA,QAAMb,OAAO,GAAG;AAAEc,IAAAA,UAAU,EAAEH;AAAd,GAAhB;AAEA,SAAOZ,MAAM,CAACC,OAAD,EAAUC,MAAV,CAAb;AACD;;AAED,gBAAe,OAAOc,GAAP,EAAYC,GAAZ,KAAoB;AACjCA,EAAAA,GAAG,CAACC,SAAJ,CAAc,6BAAd,EAA6C,GAA7C;AACAD,EAAAA,GAAG,CAACC,SAAJ,CAAc,8BAAd,EAA8C,GAA9C;AACA,MAAIjB,OAAJ;;AACA,MAAI;AACFA,IAAAA,OAAO,GAAGkB,IAAI,CAACC,KAAL,CAAWJ,GAAG,CAACK,IAAf,CAAV;AACD,GAFD,CAEE,OAAOC,KAAP,EAAc;AACdL,IAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEF,MAAAA;AAAF,KAArB;AACA;AACD;;AACD,MAAI;AAAEG,IAAAA,SAAF;AAAaC,IAAAA,cAAb;AAA6BrB,IAAAA;AAA7B,MAAqCJ,OAAzC;AACAI,EAAAA,GAAG,GAAGA,GAAG,IAAI,SAAb;AACA,MAAIsB,gBAAgB,GAAG,OAAvB;;AACA,MAAItB,GAAG,IAAIN,UAAX,EAAuB;AACrB4B,IAAAA,gBAAgB,GAAGhB,kBAAkB,EAArC;AACD;;AAED,QAAMiB,OAAO,GAAG;AACdC,IAAAA,MAAM,EAAE,MADM;AAEdC,IAAAA,GAAG,EAAG,WAAUzB,GAAI,0BAFN;AAGd0B,IAAAA,IAAI,EAAE;AACJC,MAAAA,IAAI,EAAEP,SADF;AAEJQ,MAAAA,WAAW,EAAE,SAFT;AAGJP,MAAAA;AAHI,KAHQ;AAQdQ,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAG,UAASR,gBAAiB,EADnC;AAEP,sBAAgB;AAFT;AARK,GAAhB;;AAaA,MAAI;AACF,QAAIS,IAAI,GAAG,MAAMxC,KAAK,CAACgC,OAAD,CAAtB;;AAEA,QAAIQ,IAAI,CAACb,MAAL,IAAe,GAAnB,EAAwB;AACtBN,MAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBY,IAAI,CAACL,IAA1B;AACD,KAFD,MAEO;AACLd,MAAAA,GAAG,CAACM,MAAJ,CAAWa,IAAI,CAACb,MAAhB,EAAwBC,IAAxB,CAA6BY,IAA7B;AACD;AACF,GARD,CAQE,OAAOd,KAAP,EAAc;AACde,IAAAA,OAAO,CAACC,GAAR,CAAYhB,KAAZ;AACAL,IAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEF,MAAAA;AAAF,KAArB;AACD;AACF,CA1CD","sourcesContent":["import axios from 'axios';\nimport jwt from 'jsonwebtoken';\nimport uuid4 from 'uuid4';\nimport { envMapping } from '../../constants';\n\nfunction getJWT(payload, secret) {\n  const issuer = process.env.CUSTOMER_ID;\n\n  return jwt.sign(payload, secret, {\n    algorithm: 'HS256',\n    expiresIn: '24h',\n    issuer: issuer,\n    jwtid: uuid4(),\n  });\n}\n\nfunction getManagementToken() {\n  const accessKey = process.env.MANAGEMENT_KEY;\n  const secret = process.env.MANAGEMENT_SECRET;\n  const payload = { access_key: accessKey };\n\n  return getJWT(payload, secret);\n}\n\nexport default async (req, res) => {\n  res.setHeader('Access-Control-Allow-Origin', '*');\n  res.setHeader('Access-Control-Allow-Methods', '*');\n  let payload;\n  try {\n    payload = JSON.parse(req.body);\n  } catch (error) {\n    res.status(400).json({ error });\n    return;\n  }\n  let { room_name, recording_info, env } = payload;\n  env = env || 'prod-in';\n  let management_token = 'dummy';\n  if (env in envMapping) {\n    management_token = getManagementToken();\n  }\n\n  const options = {\n    method: 'post',\n    url: `https://${env}.100ms.live/api/v1/rooms`,\n    data: {\n      name: room_name,\n      description: 'nk room',\n      recording_info,\n    },\n    headers: {\n      Authorization: `Bearer ${management_token}`,\n      'Content-Type': 'application/json',\n    },\n  };\n  try {\n    var resp = await axios(options);\n\n    if (resp.status == 200) {\n      res.status(200).json(resp.data);\n    } else {\n      res.status(resp.status).json(resp);\n    }\n  } catch (error) {\n    console.log(error);\n    res.status(500).json({ error });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}