{"ast":null,"code":"var _jsxFileName = \"/Users/Pravin/Study/nikhil/react/sample-app-web/src/stores/AppContext.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { getLocalStreamException } from '../utils';\nconst AppContext = /*#__PURE__*/React.createContext();\n\nclass AppContextProvider extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      client: null,\n      localStreamError: null,\n      loginInfo: {\n        roomName: '',\n        roomId: '',\n        displayName: '',\n        role: '',\n        env: ''\n      },\n      settings: {\n        selectedAudioDevice: '',\n        selectedVideoDevice: '',\n        resolution: 'qvga',\n        bandwidth: 256,\n        codec: 'vp8',\n        frameRate: 20,\n        isDevMode: false,\n        shouldApplyConstraints: false\n      },\n      roomState: {\n        isConnected: false,\n        login: false,\n        loading: false,\n        localAudioEnabled: true,\n        localVideoEnabled: true,\n        screenSharingEnabled: false,\n        collapsed: true,\n        isFullScreen: false,\n        vidFit: false,\n        messages: [],\n        hasUnreadMessages: false\n      }\n    });\n  }\n\n  render() {\n    return __jsx(AppContext.Provider, {\n      value: {\n        loginInfo: this.state.loginInfo,\n        settings: this.state.settings,\n        client: this.state.client,\n        localStreamError: this.state.localStreamError,\n        roomState: this.state.roomState,\n        setLocalStreamError: error => {\n          this.setState({\n            localStreamError: getLocalStreamException(error)\n          });\n        },\n        setSettings: (settings, cb) => {\n          this.setState({\n            settings: _objectSpread(_objectSpread({}, this.state.settings), settings)\n          }, () => {\n            cb && cb();\n          });\n        },\n        setLoginInfo: loginInfo => {\n          this.setState({\n            loginInfo: _objectSpread(_objectSpread({}, this.state.loginInfo), loginInfo)\n          });\n\n          if (loginInfo.displayName) {\n            localStorage.setItem('loginInfo.displayName', loginInfo.displayName);\n          }\n        },\n        setClient: client => {\n          this.setState({\n            client: client\n          });\n        },\n        setRoomState: roomState => {\n          this.setState({\n            roomState: _objectSpread(_objectSpread({}, this.state.roomState), roomState)\n          });\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 7\n      }\n    }, this.props.children);\n  }\n\n}\n\nexport { AppContext, AppContextProvider };","map":{"version":3,"sources":["/Users/Pravin/Study/nikhil/react/sample-app-web/src/stores/AppContext.js"],"names":["React","Component","getLocalStreamException","AppContext","createContext","AppContextProvider","client","localStreamError","loginInfo","roomName","roomId","displayName","role","env","settings","selectedAudioDevice","selectedVideoDevice","resolution","bandwidth","codec","frameRate","isDevMode","shouldApplyConstraints","roomState","isConnected","login","loading","localAudioEnabled","localVideoEnabled","screenSharingEnabled","collapsed","isFullScreen","vidFit","messages","hasUnreadMessages","render","state","setLocalStreamError","error","setState","setSettings","cb","setLoginInfo","localStorage","setItem","setClient","setRoomState","props","children"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { getLocalStreamException } from '../utils';\n\nconst AppContext = React.createContext();\n\nclass AppContextProvider extends Component {\n  state = {\n    client: null,\n    localStreamError: null,\n    loginInfo: {\n      roomName: '',\n      roomId: '',\n      displayName: '',\n      role: '',\n      env: '',\n    },\n    settings: {\n      selectedAudioDevice: '',\n      selectedVideoDevice: '',\n      resolution: 'qvga',\n      bandwidth: 256,\n      codec: 'vp8',\n      frameRate: 20,\n      isDevMode: false,\n      shouldApplyConstraints: false,\n    },\n    roomState: {\n      isConnected: false,\n      login: false,\n      loading: false,\n      localAudioEnabled: true,\n      localVideoEnabled: true,\n      screenSharingEnabled: false,\n      collapsed: true,\n      isFullScreen: false,\n      vidFit: false,\n      messages: [],\n      hasUnreadMessages: false,\n    },\n  };\n  render() {\n    return (\n      <AppContext.Provider\n        value={{\n          loginInfo: this.state.loginInfo,\n          settings: this.state.settings,\n          client: this.state.client,\n          localStreamError: this.state.localStreamError,\n          roomState: this.state.roomState,\n          setLocalStreamError: error => {\n            this.setState({ localStreamError: getLocalStreamException(error) });\n          },\n          setSettings: (settings, cb) => {\n            this.setState(\n              {\n                settings: { ...this.state.settings, ...settings },\n              },\n              () => {\n                cb && cb();\n              }\n            );\n          },\n          setLoginInfo: loginInfo => {\n            this.setState({\n              loginInfo: { ...this.state.loginInfo, ...loginInfo },\n            });\n            if (loginInfo.displayName) {\n              localStorage.setItem(\n                'loginInfo.displayName',\n                loginInfo.displayName\n              );\n            }\n          },\n          setClient: client => {\n            this.setState({\n              client: client,\n            });\n          },\n          setRoomState: roomState => {\n            this.setState({\n              roomState: { ...this.state.roomState, ...roomState },\n            });\n          },\n        }}\n      >\n        {this.props.children}\n      </AppContext.Provider>\n    );\n  }\n}\n\nexport { AppContext, AppContextProvider };\n"]},"metadata":{},"sourceType":"module"}