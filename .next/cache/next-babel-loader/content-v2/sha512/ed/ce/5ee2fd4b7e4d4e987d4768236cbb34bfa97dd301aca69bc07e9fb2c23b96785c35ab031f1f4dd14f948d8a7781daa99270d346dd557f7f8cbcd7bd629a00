{"ast":null,"code":"var _jsxFileName = \"/Users/Pravin/Study/nikhil/react/sample-app-web/src/components/Chat/index.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport ChatBubble from './chatbubble';\nimport ChatInput from './chatinput';\nexport default class ChatFeed extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      messages: props.messages || []\n    };\n  }\n\n  _scrollToBottom() {\n    const {\n      chat\n    } = this.refs;\n\n    if (chat !== undefined) {\n      const scrollHeight = chat.scrollHeight;\n      const height = chat.clientHeight;\n      const maxScrollTop = scrollHeight - height;\n      ReactDOM.findDOMNode(chat).scrollTop = maxScrollTop > 0 ? maxScrollTop : 0;\n    }\n  }\n\n  _renderGroup(messages, index, id) {\n    var group = [];\n\n    for (var i = index; messages[i] ? messages[i].id == id : false; i--) {\n      group.push(messages[i]);\n    }\n\n    var message_nodes = group.reverse().map((curr, index) => {\n      return __jsx(ChatBubble, {\n        key: Math.random().toString(36),\n        message: curr,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 14\n        }\n      });\n    });\n    return __jsx(\"div\", {\n      key: Math.random().toString(36),\n      className: \"chatbubble-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 7\n      }\n    }, message_nodes);\n  }\n\n  _renderMessages(messages) {\n    var message_nodes = messages.map((curr, index) => {\n      // Find diff in message type or no more messages\n      if ((messages[index + 1] ? false : true) || messages[index + 1].id != curr.id) {\n        return this._renderGroup(messages, index, curr.id);\n      }\n    }); // return nodes\n\n    return message_nodes;\n  }\n\n  render() {\n    window.setTimeout(() => {\n      this._scrollToBottom();\n    }, 10);\n    const messages = [{\n      id: 0,\n      message: 'hello every one',\n      senderName: 'kevin kang'\n    }];\n    return __jsx(\"div\", {\n      id: \"chat-panel\",\n      className: \"flex flex-1 flex-col max-h-full\",\n      style: {\n        backgroundColor: '#000000'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 7\n      }\n    }, __jsx(\"div\", {\n      className: \"border-b border-gray-800 h-10 flex items-center justify-between pr-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }\n    }, __jsx(\"span\", {\n      className: \"title-chat\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }\n    }, \"Chat\"), __jsx(\"button\", {\n      className: \"text-white text-xl\",\n      onClick: this.props.onClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }\n    }, \"\\xD7\")), __jsx(\"div\", {\n      ref: \"chat\",\n      className: \"chat-history\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }\n    }, __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }\n    }, this._renderMessages(this.props.messages))), __jsx(ChatInput, {\n      onSendMessage: this.props.onSendMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\nChatFeed.propTypes = {\n  isTyping: PropTypes.bool,\n  messages: PropTypes.array.isRequired,\n  onSendMessage: PropTypes.func.isRequired\n};","map":{"version":3,"sources":["/Users/Pravin/Study/nikhil/react/sample-app-web/src/components/Chat/index.js"],"names":["React","Component","ReactDOM","PropTypes","ChatBubble","ChatInput","ChatFeed","constructor","props","state","messages","_scrollToBottom","chat","refs","undefined","scrollHeight","height","clientHeight","maxScrollTop","findDOMNode","scrollTop","_renderGroup","index","id","group","i","push","message_nodes","reverse","map","curr","Math","random","toString","_renderMessages","render","window","setTimeout","message","senderName","backgroundColor","onClose","onSendMessage","propTypes","isTyping","bool","array","isRequired","func"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport ChatBubble from './chatbubble';\nimport ChatInput from './chatinput';\n\nexport default class ChatFeed extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      messages: props.messages || [],\n    };\n  }\n\n  _scrollToBottom() {\n    const { chat } = this.refs;\n    if (chat !== undefined) {\n      const scrollHeight = chat.scrollHeight;\n      const height = chat.clientHeight;\n      const maxScrollTop = scrollHeight - height;\n      ReactDOM.findDOMNode(chat).scrollTop =\n        maxScrollTop > 0 ? maxScrollTop : 0;\n    }\n  }\n\n  _renderGroup(messages, index, id) {\n    var group = [];\n\n    for (var i = index; messages[i] ? messages[i].id == id : false; i--) {\n      group.push(messages[i]);\n    }\n\n    var message_nodes = group.reverse().map((curr, index) => {\n      return <ChatBubble key={Math.random().toString(36)} message={curr} />;\n    });\n    return (\n      <div key={Math.random().toString(36)} className=\"chatbubble-wrapper\">\n        {message_nodes}\n      </div>\n    );\n  }\n\n  _renderMessages(messages) {\n    var message_nodes = messages.map((curr, index) => {\n      // Find diff in message type or no more messages\n      if (\n        (messages[index + 1] ? false : true) ||\n        messages[index + 1].id != curr.id\n      ) {\n        return this._renderGroup(messages, index, curr.id);\n      }\n    });\n    // return nodes\n    return message_nodes;\n  }\n\n  render() {\n    window.setTimeout(() => {\n      this._scrollToBottom();\n    }, 10);\n\n    const messages = [\n      { id: 0, message: 'hello every one', senderName: 'kevin kang' },\n    ];\n\n    return (\n      <div\n        id=\"chat-panel\"\n        className=\"flex flex-1 flex-col max-h-full\"\n        style={{ backgroundColor: '#000000' }}\n      >\n        <div className=\"border-b border-gray-800 h-10 flex items-center justify-between pr-3\">\n          <span className=\"title-chat\">Chat</span>\n          <button className=\"text-white text-xl\" onClick={this.props.onClose}>\n            &times;\n          </button>\n        </div>\n\n        <div ref=\"chat\" className=\"chat-history\">\n          <div>{this._renderMessages(this.props.messages)}</div>\n        </div>\n        <ChatInput onSendMessage={this.props.onSendMessage} />\n      </div>\n    );\n  }\n}\n\nChatFeed.propTypes = {\n  isTyping: PropTypes.bool,\n  messages: PropTypes.array.isRequired,\n  onSendMessage: PropTypes.func.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}