{"ast":null,"code":"/*\n *  Copyright (c) 2015 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n'use strict'; // Meter class that generates a number correlated to audio volume.\n// The meter class itself displays nothing, but it makes the\n// instantaneous and time-decaying volumes available for inspection.\n// It also reports on the fraction of samples that were at or near\n// the top of the measurement range.\n\nimport _classCallCheck from \"/Users/Pravin/Study/nikhil/react/sample-app-web/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Pravin/Study/nikhil/react/sample-app-web/node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar SoundMeter = /*#__PURE__*/function () {\n  function SoundMeter(context) {\n    _classCallCheck(this, SoundMeter);\n\n    this.context = context;\n    this.instant = 0.0; //this.slow = 0.0;\n    //this.clip = 0.0;\n\n    this.script = context.createScriptProcessor(2048, 1, 1);\n    var that = this;\n\n    this.script.onaudioprocess = function (event) {\n      var input = event.inputBuffer.getChannelData(0);\n      var i;\n      var sum = 0.0;\n      var clipcount = 0;\n\n      for (i = 0; i < input.length; ++i) {\n        sum += input[i] * input[i];\n\n        if (Math.abs(input[i]) > 0.99) {\n          clipcount += 1;\n        }\n      }\n\n      that.instant = Math.sqrt(sum / input.length); //that.slow = 0.95 * that.slow + 0.05 * that.instant;\n      //that.clip = clipcount / input.length;\n    };\n  }\n\n  _createClass(SoundMeter, [{\n    key: \"connectToSource\",\n    value: function connectToSource(stream) {\n      this.mic = this.context.createMediaStreamSource(stream);\n      this.mic.connect(this.script); // necessary to make sample run, but should not be.\n\n      this.script.connect(this.context.destination);\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this.mic.disconnect();\n      this.script.disconnect();\n    }\n  }]);\n\n  return SoundMeter;\n}();\n\nexport { SoundMeter as default };","map":{"version":3,"sources":["/Users/Pravin/Study/nikhil/react/sample-app-web/src/components/Settings/soundmeter.js"],"names":["SoundMeter","context","instant","script","createScriptProcessor","that","onaudioprocess","event","input","inputBuffer","getChannelData","i","sum","clipcount","length","Math","abs","sqrt","stream","mic","createMediaStreamSource","connect","destination","disconnect"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;AACA;AACA;;;;;IACqBA,U;AACnB,sBAAYC,OAAZ,EAAqB;AAAA;;AACnB,SAAKA,OAAL,GAAeA,OAAf;AACA,SAAKC,OAAL,GAAe,GAAf,CAFmB,CAGnB;AACA;;AACA,SAAKC,MAAL,GAAcF,OAAO,CAACG,qBAAR,CAA8B,IAA9B,EAAoC,CAApC,EAAuC,CAAvC,CAAd;AACA,QAAIC,IAAI,GAAG,IAAX;;AACA,SAAKF,MAAL,CAAYG,cAAZ,GAA6B,UAAUC,KAAV,EAAiB;AAC5C,UAAIC,KAAK,GAAGD,KAAK,CAACE,WAAN,CAAkBC,cAAlB,CAAiC,CAAjC,CAAZ;AACA,UAAIC,CAAJ;AACA,UAAIC,GAAG,GAAG,GAAV;AACA,UAAIC,SAAS,GAAG,CAAhB;;AACA,WAAKF,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGH,KAAK,CAACM,MAAtB,EAA8B,EAAEH,CAAhC,EAAmC;AACjCC,QAAAA,GAAG,IAAIJ,KAAK,CAACG,CAAD,CAAL,GAAWH,KAAK,CAACG,CAAD,CAAvB;;AACA,YAAII,IAAI,CAACC,GAAL,CAASR,KAAK,CAACG,CAAD,CAAd,IAAqB,IAAzB,EAA+B;AAC7BE,UAAAA,SAAS,IAAI,CAAb;AACD;AACF;;AACDR,MAAAA,IAAI,CAACH,OAAL,GAAea,IAAI,CAACE,IAAL,CAAUL,GAAG,GAAGJ,KAAK,CAACM,MAAtB,CAAf,CAX4C,CAY5C;AACA;AACD,KAdD;AAeD;;;;oCAEeI,M,EAAQ;AACtB,WAAKC,GAAL,GAAW,KAAKlB,OAAL,CAAamB,uBAAb,CAAqCF,MAArC,CAAX;AACA,WAAKC,GAAL,CAASE,OAAT,CAAiB,KAAKlB,MAAtB,EAFsB,CAGtB;;AACA,WAAKA,MAAL,CAAYkB,OAAZ,CAAoB,KAAKpB,OAAL,CAAaqB,WAAjC;AACD;;;2BAEM;AACL,WAAKH,GAAL,CAASI,UAAT;AACA,WAAKpB,MAAL,CAAYoB,UAAZ;AACD;;;;;;SAnCkBvB,U","sourcesContent":["/*\n *  Copyright (c) 2015 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n\n'use strict';\n\n// Meter class that generates a number correlated to audio volume.\n// The meter class itself displays nothing, but it makes the\n// instantaneous and time-decaying volumes available for inspection.\n// It also reports on the fraction of samples that were at or near\n// the top of the measurement range.\nexport default class SoundMeter {\n  constructor(context) {\n    this.context = context;\n    this.instant = 0.0;\n    //this.slow = 0.0;\n    //this.clip = 0.0;\n    this.script = context.createScriptProcessor(2048, 1, 1);\n    var that = this;\n    this.script.onaudioprocess = function (event) {\n      var input = event.inputBuffer.getChannelData(0);\n      var i;\n      var sum = 0.0;\n      var clipcount = 0;\n      for (i = 0; i < input.length; ++i) {\n        sum += input[i] * input[i];\n        if (Math.abs(input[i]) > 0.99) {\n          clipcount += 1;\n        }\n      }\n      that.instant = Math.sqrt(sum / input.length);\n      //that.slow = 0.95 * that.slow + 0.05 * that.instant;\n      //that.clip = clipcount / input.length;\n    };\n  }\n\n  connectToSource(stream) {\n    this.mic = this.context.createMediaStreamSource(stream);\n    this.mic.connect(this.script);\n    // necessary to make sample run, but should not be.\n    this.script.connect(this.context.destination);\n  }\n\n  stop() {\n    this.mic.disconnect();\n    this.script.disconnect();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}